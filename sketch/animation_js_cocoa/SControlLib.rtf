{\rtf1\ansi\ansicpg936\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red67\green67\blue67;\red0\green0\blue255;
\red251\green0\blue7;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c33333;\cssrgb\c0\c0\c100000;
\cssrgb\c100000\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23920\viewh14900\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 log(\cf3 "start"\cf2 )\
coscript.setShouldKeepAround(\cf4 true\cf2 );\
\
\cf4 var\cf2  identifier = \cf3 "myToolbarThread"\cf2 ;\
\cf4 var\cf2  threadDictionary = NSThread.mainThread().threadDictionary();\
\cf4 var\cf2  Toolbar = threadDictionary[identifier];\
Toolbar = NSPanel.alloc().init();\
\cf5 //Toolbar.setStyleMask(NSTitledWindowMask + NSFullSizeContentViewWindowMask);\cf2 \
Toolbar.setBackgroundColor(NSColor.colorWithRed_green_blue_alpha(\cf4 1.0\cf2 , \cf4 1.0\cf2 , \cf4 1.0\cf2 , \cf4 1\cf2 ));\
\cf5 //Toolbar.setTitleVisibility(NSWindowTitleHidden);\cf2 \
Toolbar.setTitlebarAppearsTransparent(\cf4 true\cf2 );\
Toolbar.setFrame_display(NSMakeRect(\cf4 0\cf2 , \cf4 0\cf2 , \cf4 800\cf2 , \cf4 480\cf2 ), \cf4 false\cf2 );\
Toolbar.setMovableByWindowBackground(\cf4 true\cf2 );\
Toolbar.becomeKeyWindow();\
Toolbar.setLevel(NSFloatingWindowLevel);\
\cf4 var\cf2  contentView = Toolbar.contentView();\
context.document.showMessage(\cf3 'Start'\cf2 )   \
\
\cf5 ////////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\
\cf5 // background image\cf2 \
imageView = NSImageView.alloc().init();\
imageView.frame = NSMakeRect(\cf4 0\cf2 , \cf4 0\cf2 , \cf4 800\cf2 , \cf4 480\cf2 );\
imageView.imageFrameStyle = NSImageFramePhoto; \
imageView.imageScaling = NSImageScaleNone;\
\cf4 var\cf2  image = NSImage.alloc().initWithContentsOfFile(\cf3 "/Users/navibase/sketch-iauto/pic1.jpeg"\cf2 );\
imageView.image = image\
contentView.addSubview(imageView);\
\
\
\cf5 ////////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\
\cf5 // SNSView \cf2 \
\
SInherit = \cf4 function\cf2 (className, BaseClass, selectorHandlerDict) \{\
    \cf4 var\cf2  uniqueClassName = className + NSUUID.UUID().UUIDString();\
    \cf4 var\cf2  delegateClassDesc = MOClassDescription.allocateDescriptionForClassWithName_superclass_(uniqueClassName, BaseClass);\
    \cf4 for\cf2  (\cf4 var\cf2  selectorString \cf4 in\cf2  selectorHandlerDict) \{\
        delegateClassDesc.addInstanceMethodWithSelector_function_(selectorString, selectorHandlerDict[selectorString]);\
        log(selectorString + \cf3 "->"\cf2  + selectorHandlerDict[selectorString].toString())\
    \}\
    delegateClassDesc.registerClass();\
    \cf4 return\cf2  NSClassFromString(uniqueClassName);\
\};\
\
\cf4 var\cf2  SNSView = SInherit(\cf3 "SNSView"\cf2 , NSView, \{\
    \cf3 "mouseDown:"\cf2 :\cf4 function\cf2 (ev)\{ \
            \cf5 //context.document.showMessage('mouseDown')\cf2 \
            \cf4 if\cf2 (\cf4 this\cf2 .mouseDownHander)\
                \cf4 this\cf2 .mouseDownHander(ev)\
        \},\
    \cf3 "mouseUp:"\cf2 :\cf4 function\cf2 (ev)\{ \
            \cf5 //context.document.showMessage('mouseUp')\cf2 \
            \cf4 if\cf2 (\cf4 this\cf2 .mouseUpHander)\
                \cf4 this\cf2 .mouseUpHander(ev)\
        \},\
    \cf3 "mouseMoved:"\cf2 :\cf4 function\cf2 (ev)\{ \
            \cf5 //context.document.showMessage('mouseMoved')\cf2 \
            \cf4 if\cf2 (\cf4 this\cf2 .mouseMovedHander)\
                \cf4 this\cf2 .mouseMovedHander(ev)\
        \},\
    \cf3 "mouseEntered:"\cf2 :\cf4 function\cf2 (ev)\{\
            \cf5 //context.document.showMessage('mouseEntered')\cf2 \
            \cf4 if\cf2 (\cf4 this\cf2 .mouseEnteredHander)\
                \cf4 this\cf2 .mouseEnteredHander(ev)\
        \},\
    \cf3 "mouseExited:"\cf2 :\cf4 function\cf2 (ev)\{ \
            \cf5 //context.document.showMessage('mouseExited')\cf2 \
            \cf4 if\cf2 (\cf4 this\cf2 .mouseExitedHander)\
                \cf4 this\cf2 .mouseExitedHander(ev)\
        \},\
    \cf5 //////////////////////////////////////////////\cf2 \
    \cf3 "addMouseDownHander:"\cf2 :\cf4 function\cf2 (func)\{ \
            \cf4 this\cf2 .mouseDownHander = func;\
        \},\
    \cf3 "addMouseUpHander:"\cf2 :\cf4 function\cf2 (func)\{ \
            \cf4 this\cf2 .mouseUpHander = func;\
        \},\
    \cf3 "addMouseMovedHander:"\cf2 :\cf4 function\cf2 (func)\{ \
            \cf4 this\cf2 .mouseMovedHander = func;\
        \},\
    \cf3 "addMouseEnteredHander:"\cf2 :\cf4 function\cf2 (func)\{ \
            \cf4 this\cf2 .mouseEnteredHander = func;\
        \},\
    \cf3 "addMouseExitedHander:"\cf2 :\cf4 function\cf2 (func)\{ \
            \cf4 this\cf2 .mouseExitedHander = func;\
        \},\
\})\
\
\
\cf5 // SNSView test\cf2 \
\
\cf5 // var viewA = SNSView.alloc().init();\cf2 \
\cf5 // viewA.frame = NSMakeRect(0, 0, 600, 300);\cf2 \
\cf5 // viewA.setWantsLayer(true);\cf2 \
\cf5 // var viewALayer = CALayer.layer();\cf2 \
\cf5 // viewALayer.setBackgroundColor(CGColorCreateGenericRGB(0.8,\'a00.0,\'a00.0,\'a01));\cf2 \
\cf5 // viewA.setLayer(viewALayer);\cf2 \
\cf5 // viewA.alphaValue = 1;     \cf2 \
\cf5 // trackingArea = NSTrackingArea.alloc().initWithRect_options_owner_userInfo(NSMakeRect(0, 0, 600, 300), NSTrackingMouseMoved+NSTrackingActiveInKeyWindow+NSTrackingMouseEnteredAndExited, viewA, nil);\cf2 \
\cf5 // viewA.addTrackingArea(trackingArea);\cf2 \
\cf5 // viewA.becomeFirstResponder()\cf2 \
\cf5 // viewA.addMouseDownHander(function(ev)\{\cf2 \
\cf5 //     context.document.showMessage('MouseDown')\cf2 \
\cf5 // \})\cf2 \
\cf5 // viewA.addMouseUpHander(function(ev)\{\cf2 \
\cf5 //     context.document.showMessage('MouseUp')\cf2 \
\cf5 // \})\cf2 \
\cf5 // viewA.addMouseMovedHander(function(ev)\{\cf2 \
\cf5 //     context.document.showMessage('MouseMoved')\cf2 \
\cf5 // \})\cf2 \
\cf5 // viewA.addMouseEnteredHander(function(ev)\{\cf2 \
\cf5 //     context.document.showMessage('MouseEntered')\cf2 \
\cf5 // \})\cf2 \
\cf5 // viewA.addMouseExitedHander(function(ev)\{\cf2 \
\cf5 //     context.document.showMessage('MouseExited')\cf2 \
\cf5 // \})\cf2 \
\cf5 // contentView.addSubview(viewA);\cf2 \
\
\
\cf5 ////////////////////////////////////////////////////////////////////////////////////////////////\cf2 \
\
\cf5 // SNSButton\cf2 \
\
\cf4 class\cf2  SNSButton\
\{\
    constructor()\
    \{\
        \cf4 this\cf2 .mainView = SNSView.alloc().init();\
        \cf4 this\cf2 .mainView.setWantsLayer(\cf4 true\cf2 );\
        \cf4 var\cf2  viewLayer = CALayer.layer();\
        \cf4 this\cf2 .mainView.setLayer(viewLayer);\
        \cf4 this\cf2 .mainView.becomeFirstResponder()\
\
\
        \cf4 var\cf2  defaultColorRef = CGColorCreateGenericRGB(\cf4 0.2\cf2 ,\'a0\cf4 0.2\cf2 ,\'a0\cf4 0.2\cf2 ,\'a0\cf4 0.5\cf2 )\
        \cf4 var\cf2  pushColorRef = CGColorCreateGenericRGB(\cf4 0.2\cf2 ,\'a0\cf4 0.2\cf2 ,\'a0\cf4 0.2\cf2 ,\'a0\cf4 0.3\cf2 )\
\
        \cf4 this\cf2 .mainView.layer().setBackgroundColor(defaultColorRef);\
\
        \cf4 this\cf2 .textField = NSTextField.alloc().init()\
        \cf4 this\cf2 .textField.frame = NSMakeRect(\cf4 0\cf2 , \cf4 0\cf2 , \cf4 300\cf2 , \cf4 100\cf2 )\
        \cf4 this\cf2 .textField.setBezeled(\cf4 false\cf2 )\
        \cf4 this\cf2 .textField.setDrawsBackground(\cf4 false\cf2 )\
        \cf4 this\cf2 .textField.setEditable(\cf4 false\cf2 )\
        \cf4 this\cf2 .textField.setSelectable(\cf4 false\cf2 )\
        \cf4 this\cf2 .textField.setStringValue(\cf3 "buttonX"\cf2 );\
        \cf4 var\cf2  font = NSFont.fontWithName_size(\cf3 "Arial"\cf2 , \cf4 20\cf2 );\
        \cf4 this\cf2 .textField.setFont(font);\
        \cf4 this\cf2 .textField.setTextColor(NSColor.colorWithDeviceRed_green_blue_alpha(\cf4 0.9\cf2 ,\cf4 0.9\cf2 ,\cf4 0.9\cf2 ,\cf4 1\cf2 )) \cf5 // NSColor.whiteColor()\cf2 \
\
        \cf4 var\cf2  mainView = \cf4 this\cf2 .mainView;\
        \cf4 var\cf2  textField = \cf4 this\cf2 .textField;\
        textField.setStringValue(\cf3 "button2"\cf2 );\
\
        \cf4 this\cf2 .mainView.addMouseDownHander(\cf4 function\cf2 (ev)\{\
            context.document.showMessage(\cf3 'MouseDown'\cf2 )\
            mainView.layer().setBackgroundColor(pushColorRef);\
        \});\
\
        \cf4 this\cf2 .mainView.addMouseUpHander(\cf4 function\cf2 (ev)\{\
            context.document.showMessage(\cf3 'MouseUp'\cf2 )\
            mainView.layer().setBackgroundColor(defaultColorRef);\
        \});\
\
        \cf4 this\cf2 .mainView.addMouseEnteredHander(\cf4 function\cf2 (ev)\{\
            context.document.showMessage(\cf3 'MouseEntered'\cf2 )\
            textField.setTextColor(NSColor.colorWithDeviceRed_green_blue_alpha(\cf4 1\cf2 , \cf4 1\cf2 , \cf4 1\cf2 , \cf4 1\cf2 ))\
            \
        \});\
\
        \cf4 this\cf2 .mainView.addMouseExitedHander(\cf4 function\cf2 (ev)\{\
            context.document.showMessage(\cf3 'MouseExited'\cf2 )\
            textField.setTextColor(NSColor.colorWithDeviceRed_green_blue_alpha(\cf4 0.9\cf2 ,\cf4 0.9\cf2 ,\cf4 0.9\cf2 ,\cf4 1\cf2 ))\
        \});\
\
        \cf4 this\cf2 .mainView.addSubview(\cf4 this\cf2 .textField);\
    \}\
    getMainView()\
    \{\
        \cf4 return\cf2  \cf4 this\cf2 .mainView;\
    \}\
    setFrame(rect)\
    \{\
        \cf4 this\cf2 .mainView.setFrame(rect);\
        \cf4 this\cf2 .trackingArea = NSTrackingArea.alloc().initWithRect_options_owner_userInfo(NSMakeRect(\cf4 0\cf2 , \cf4 0\cf2 , \cf4 300\cf2 , \cf4 100\cf2 ),\
            NSTrackingMouseMoved+NSTrackingActiveInKeyWindow+NSTrackingMouseEnteredAndExited, \cf4 this\cf2 .mainView, \cf4 nil\cf2 );\
        \cf4 this\cf2 .mainView.addTrackingArea(\cf4 this\cf2 .trackingArea);\
    \}\
    setText(text)\
    \{\
        \cf4 this\cf2 .textField.setStringValue(text);\
    \}\
\}\
\
btn = \cf4 new\cf2  SNSButton();\
btn.setFrame(NSMakeRect(\cf4 0\cf2 , \cf4 350\cf2 , \cf4 300\cf2 , \cf4 100\cf2 ));\
btn.setText(\cf3 "Button Test"\cf2 )\
contentView.addSubview(btn.getMainView());\
\
threadDictionary[identifier] = Toolbar;\
Toolbar.center();\
Toolbar.makeKeyAndOrderFront(\cf4 nil\cf2 );\
\
log(\cf3 "over"\cf2 )\
\
\
}
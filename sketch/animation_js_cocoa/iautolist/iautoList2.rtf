{\rtf1\ansi\ansicpg936\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red67\green67\blue67;\red251\green0\blue7;
\red0\green0\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c33333;\cssrgb\c100000\c0\c0;
\cssrgb\c0\c0\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 log(\cf3 "start"\cf2 )\
\cf4 //coscript.setShouldKeepAround(true);\cf2 \
\
\cf5 var\cf2  identifier = \cf3 "myToolbarThread"\cf2 ;\
\cf5 var\cf2  threadDictionary = NSThread.mainThread().threadDictionary();\
\cf5 var\cf2  Toolbar = threadDictionary[identifier];\
Toolbar = NSPanel.alloc().init();\
\cf4 //Toolbar.setStyleMask(NSTitledWindowMask + NSFullSizeContentViewWindowMask);\cf2 \
Toolbar.setBackgroundColor(NSColor.colorWithRed_green_blue_alpha(\cf5 0.9\cf2 , \cf5 0.9\cf2 , \cf5 0.9\cf2 , \cf5 1\cf2 ));\
\cf4 //Toolbar.setTitleVisibility(NSWindowTitleHidden);\cf2 \
Toolbar.setTitlebarAppearsTransparent(\cf5 true\cf2 );\
Toolbar.setFrame_display(NSMakeRect(\cf5 0\cf2 , \cf5 0\cf2 , \cf5 800\cf2 , \cf5 480\cf2 ), \cf5 false\cf2 );\
Toolbar.setMovableByWindowBackground(\cf5 true\cf2 );\
Toolbar.becomeKeyWindow();\
Toolbar.setLevel(NSFloatingWindowLevel);\
\cf5 var\cf2  contentView = Toolbar.contentView();\
context.document.showMessage(\cf3 'Start'\cf2 )   \
\
\cf4 /////////////////////////////////////////////////////////////////////\cf2 \
\
\cf5 class\cf2  IAutoList\
\{\
    constructor(context)\
    \{\
        log(\cf3 "IAutoList.constructor"\cf2 )\
\
        \cf5 this\cf2 .context = context\
\
        \cf5 this\cf2 .scrollView = NSScrollView.alloc().init();\
        \cf5 this\cf2 .scrollView.hasVerticalScroller = \cf5 true\cf2 \
        \cf5 this\cf2 .scrollView.alphaValue = \cf5 0.4\cf2 ;\
        \cf5 this\cf2 .scrollView.setHidden(\cf5 true\cf2 )\
        \
        \cf5 this\cf2 .btnList = []\
\
        \cf5 this\cf2 .width = \cf5 0\cf2 ;\
        \cf5 this\cf2 .height = \cf5 0\cf2 ;\
        \cf5 this\cf2 .itemHeight = \cf5 0\cf2 ;\
    \}\
    setFrame(frame, itemHeight)\
    \{\
        \cf5 this\cf2 .scrollView.frame = frame;\
        \cf4 //this.scrollView.documentView.frame = frame;\cf2 \
        \cf5 this\cf2 .width = frame.size.width;\
        \cf5 this\cf2 .height = frame.size.height;\
        \cf5 this\cf2 .itemHeight = itemHeight\
    \}\
    mainView()\
    \{\
        \cf5 return\cf2  \cf5 this\cf2 .scrollView;\
    \}\
    addButton(name, btn)\
    \{\
        btn.setAttributedTitle(name);\
        btn.frame = NSMakeRect(\cf5 0\cf2 , \cf5 0\cf2 , \cf5 this\cf2 .width, \cf5 30\cf2 );\
        btn.alphaValue = \cf5 1\cf2 ;\
        \cf4 //btn.setBordered(false);\cf2 \
        btn.setButtonType(NSMomentaryChangeButton)\
        \cf5 this\cf2 .btnList.push(btn)\
    \}\
    show1()\
    \{\
\
        \cf5 var\cf2  contentView = NSView.alloc().init();\
        \cf5 var\cf2  contentViewHeight = \cf5 this\cf2 .btnList.length*\cf5 this\cf2 .itemHeight;\
        contentView.frame = NSMakeRect(\cf5 0\cf2 , \cf5 0\cf2 , \cf5 this\cf2 .width, contentViewHeight);\
        \cf4 //contentView.setWantsLayer(true);\cf2 \
        contentView.alphaValue = \cf5 0.8\cf2 ;\
        \cf4 //var viewLayer = CALayer.layer();\cf2 \
        \cf4 //viewLayer.setBackgroundColor(CGColorCreateGenericRGB(0.0,\'a00.0,\'a00.0,\'a00));\cf2 \
        \cf4 //contentView.setLayer(viewLayer);\cf2 \
        \cf5 this\cf2 .scrollView.documentView = contentView\
\
        log(\cf3 "IAutoList.show"\cf2 )\
        \cf5 this\cf2 .scrollView.setHidden(\cf5 false\cf2 )\
        \cf5 for\cf2 (\cf5 var\cf2  i=\cf5 0\cf2 ; i< \cf5 this\cf2 .btnList.length; i++)\
        \{\
            \cf5 var\cf2  btnY = contentViewHeight - (i+\cf5 1\cf2 )*\cf5 this\cf2 .itemHeight - i*\cf5 5\cf2 ;\
            \cf5 this\cf2 .btnList[i].frame = NSMakeRect(\cf5 0\cf2 , btnY, \cf5 this\cf2 .width, \cf5 this\cf2 .itemHeight);\
            contentView.addSubview(\cf5 this\cf2 .btnList[i]);\
        \}\
        \cf5 var\cf2  newPoint = NSMakePoint(\cf5 0\cf2 ,\cf5 0\cf2 )\
        \cf5 this\cf2 .scrollView.documentView().scrollPoint(newPoint);\
    \
        \cf4 //reflectScrolledClipView: [scrollview\'a0contentView]];\cf2 \
        \cf5 for\cf2 (\cf5 var\cf2  i=\cf5 0\cf2 ; i< \cf5 this\cf2 .btnList.length; i++)\
        \{\
            \cf5 var\cf2  animationTarget =  \cf5 this\cf2 .btnList[i]\
            \cf5 var\cf2  startframe = NSValue.valueWithRect(NSMakeRect(\cf5 20\cf2 , -i*\cf5 100\cf2 , \cf5 this\cf2 .width-10, \cf5 this\cf2 .itemHeight));\
            \cf5 var\cf2  endframe = NSValue.valueWithRect(NSMakeRect(\cf5 this\cf2 .btnList[i].frame().origin.x + \cf5 5\cf2 , \cf5 this\cf2 .btnList[i].frame().origin.y, \cf5 this\cf2 .width-10, \cf5 this\cf2 .itemHeight));\
            \cf4 //var endframe = NSValue.valueWithRect(this.btnList[i].frame());\cf2 \
            \cf5 var\cf2  keys = [NSViewAnimationTargetKey,NSViewAnimationEffectKey,NSViewAnimationStartFrameKey,NSViewAnimationEndFrameKey];\
            \cf5 var\cf2  values = [animationTarget,NSViewAnimationFadeInEffect,startframe,endframe];\
            \cf5 var\cf2  dictionary = [NSDictionary dictionaryWithObjects:(values) forKeys:(keys)];\
            \cf5 var\cf2  animation = NSViewAnimation.alloc().initWithViewAnimations(NSArray.arrayWithObject(dictionary));\
            animation.animationCurve = NSAnimationEaseIn;\
            animation.duration = \cf5 0.5\cf2 ;\
            \cf4 // NSAnimationNonblocking\'a0NSAnimationNonblockingThreaded NSAnimationBlocking\cf2 \
            animation.setAnimationBlockingMode(NSAnimationNonblockingThreaded);\
            animation.startAnimation();\
\
        \}\
    \}\
    show2()\
    \{\
\
        \cf5 var\cf2  contentView = NSView.alloc().init();\
        \cf5 var\cf2  contentViewHeight = \cf5 this\cf2 .btnList.length*\cf5 this\cf2 .itemHeight;\
        contentView.frame = NSMakeRect(\cf5 0\cf2 , \cf5 0\cf2 , \cf5 this\cf2 .width, contentViewHeight);\
        contentView.setWantsLayer(\cf5 true\cf2 );\
        \cf5 var\cf2  viewLayer = CALayer.layer();\
        viewLayer.setBackgroundColor(CGColorCreateGenericRGB(\cf5 0.0\cf2 ,\'a0\cf5 0.9\cf2 ,\'a0\cf5 0.9\cf2 ,\'a0\cf5 1\cf2 ));\
        contentView.setLayer(viewLayer);\
        \cf5 this\cf2 .scrollView.documentView = contentView\
\
        log(\cf3 "IAutoList.show"\cf2 )\
        \cf5 this\cf2 .scrollView.setHidden(\cf5 false\cf2 )\
        \cf5 for\cf2 (\cf5 var\cf2  i=\cf5 0\cf2 ; i< \cf5 this\cf2 .btnList.length; i++)\
        \{\
            \cf5 var\cf2  btnY = contentViewHeight - (i+\cf5 1\cf2 )*\cf5 this\cf2 .itemHeight;\
            \cf5 this\cf2 .btnList[i].frame = NSMakeRect(\cf5 0\cf2 , btnY, \cf5 this\cf2 .width, \cf5 this\cf2 .itemHeight);\
            contentView.addSubview(\cf5 this\cf2 .btnList[i]);\
        \}\
        \cf5 var\cf2  newPoint = NSMakePoint(\cf5 0\cf2 ,\cf5 0\cf2 )\
        \cf5 this\cf2 .scrollView.documentView().scrollPoint(newPoint);\
    \
        \cf4 //reflectScrolledClipView: [scrollview\'a0contentView]];\cf2 \
        \cf5 for\cf2 (\cf5 var\cf2  i=\cf5 0\cf2 ; i< \cf5 this\cf2 .btnList.length; i++)\
        \{\
            \cf5 var\cf2  animationTarget =  \cf5 this\cf2 .btnList[i]\
            \cf5 var\cf2  startframe = NSValue.valueWithRect(NSMakeRect(\cf5 500\cf2 , \cf5 this\cf2 .btnList[i].frame().size.height, \cf5 200\cf2 , \cf5 30\cf2 ));\
            \cf5 var\cf2  endframe = NSValue.valueWithRect(\cf5 this\cf2 .btnList[i].frame());\
            \cf5 var\cf2  keys = [NSViewAnimationTargetKey,NSViewAnimationEffectKey,NSViewAnimationStartFrameKey,NSViewAnimationEndFrameKey];\
            \cf5 var\cf2  values = [animationTarget,NSViewAnimationFadeInEffect,startframe,endframe];\
            \cf5 var\cf2  dictionary = [NSDictionary dictionaryWithObjects:(values) forKeys:(keys)];\
            \cf5 var\cf2  animation = NSViewAnimation.alloc().initWithViewAnimations(NSArray.arrayWithObject(dictionary));\
            animation.animationCurve = NSAnimationEaseIn;\
            animation.duration = \cf5 0.05\cf2 +\cf5 0.08\cf2 *i;\
            \cf4 // NSAnimationNonblocking\'a0NSAnimationNonblockingThreaded NSAnimationBlocking\cf2 \
            animation.setAnimationBlockingMode(NSAnimationNonblockingThreaded);\
            animation.startAnimation();\
\
        \}\
    \}\
\
\}\
\
iautoList = \cf5 new\cf2  IAutoList();\
iautoList.setFrame(NSMakeRect(\cf5 0\cf2 , \cf5 0\cf2 , \cf5 300\cf2 , \cf5 300\cf2 ), \cf5 50\cf2 );\
\cf5 var\cf2  button1 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button1"\cf2 , button1)\
\cf5 var\cf2  button2 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button2"\cf2 , button2)\
\cf5 var\cf2  button3 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button3"\cf2 , button3)\
\cf5 var\cf2  button4 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button4"\cf2 , button4)\
\cf5 var\cf2  button5 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button5"\cf2 , button5)\
\cf5 var\cf2  button6 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button6"\cf2 , button6)\
\cf5 var\cf2  button7 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button7"\cf2 , button7)\
\cf5 var\cf2  button8 = NSButton.alloc().init();\
iautoList.addButton(\cf3 "button8"\cf2 , button8)\
\
contentView.addSubview(iautoList.mainView());\
iautoList.show1();\
\
\cf4 /////////////////////////////////////////////////////////////////////\cf2 \
\
threadDictionary[identifier] = Toolbar;\
Toolbar.center();\
Toolbar.makeKeyAndOrderFront(\cf5 nil\cf2 );\
\
log(\cf3 "over"\cf2 )}